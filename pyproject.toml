[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "txtai-service"
version = "0.1.0"
description = "txtai Service with GCS Storage"
dependencies = [
    "txtai[all]>=7.0.0",
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "google-cloud-storage>=2.14.0",
    "python-multipart",
    "redis>=5.0.0"
]

[project.optional-dependencies]
dev = [
    "black>=24.10.0",
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-depends>=1.0.1",
    "pytest-ordering>=0.6",
    "pytest-xdist>=3.5.0",
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    "ipykernel",
    "jupyter"
]

[tool.setuptools]
packages = ["src"]

[tool.black]
line-length = 120
target-version = ['py311']
skip-string-normalization = true

[tool.ruff]
line-length = 120
target-version = "py311"
extend-exclude = ["__pycache__", "*.pyc", "*.egg-info"]
fix = true
unsafe-fixes = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "I",   # isort
    "N",   # naming
    "UP",  # pyupgrade
    "ANN", # annotations
    "B",   # bugbear
    "A",   # builtins
    "C4",  # comprehensions
    "RUF", # ruff-specific
    "ERA", # eradicate
    "PL",  # pylint
    "PLR", # pylint refactoring
    "W",   # warnings
    "D",   # pydocstyle
    "TCH", # type-checking
    "TID", # tidy imports
    "BLE"  # flake8-blind-except
]

extend-select = [
    "B",   # flake8-bugbear
    "C",   # flake8-comprehensions
    "I",   # isort
    "N",   # pep8-naming
    "RUF", # Ruff-specific rules
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "ANN401",  # Dynamically typed expressions (Any) are disallowed
    "PLR0913", # Too many arguments to function call
    "D100",    # Missing docstring in public module
    "D104",    # Missing docstring in public package
    "D107",    # Missing docstring in __init__
    "D203",    # 1 blank line required before class docstring
    "D213",    # Multi-line docstring summary should start at the second line
    "D406",    # Section name should end with a newline
    "D407",    # Missing dashed underline after section
    "D415",    # Missing blank line after class docstring
    "B904",    # Use 'raise from' in exception handling
    "ERA001",  # Unused import
    "TC001",   # Move import into TYPE_CHECKING block
    "TC002",   # Move import into TYPE_CHECKING block (third-party)
    "TC003",   # Move import into TYPE_CHECKING block (stdlib)
    "C901",    # Function is too complex
]

[tool.ruff.lint.pylint]
max-args = 8  # Allow more arguments in functions
max-branches = 15  # Allow more complex functions
max-statements = 50  # Allow more statements in functions

[tool.ruff.lint.per-file-ignores]
"src/services/base_service.py" = ["ANN401"]
"src/services/registry.py" = [
    "N818",    # Exception name should end with Error
    "BLE001"  # Do not catch blind exception: Exception
]
"src/services/core/embeddings_service.py" = [
    "ANN401",  # Allow Any in txtai interactions
    "PLR0912", # Allow complex functions for txtai operations
    "PLR0915", # Allow many statements for txtai operations
]
"src/services/core/llm_service.py" = [
    "ANN401",  # Allow Any in LLM responses
    "PLR0912", # Allow complex functions for LLM handling
]
"src/services/core/rag_service.py" = [
    "ANN401",  # Allow Any in RAG operations
    "PLR0912", # Allow complex functions for RAG
]
"src/middleware/auth.py" = [
    "BLE001"  # Allow broad exception handling in auth middleware
]
"src/routes/stream_router.py" = [
    "BLE001"  # Allow broad exception handling in stream router
]
"src/services/core/txtai_service.py" = [
    "BLE001"  # Allow broad exception handling in txtai service
]
"tests/*" = [
    "ANN",     # Allow missing annotations in tests
    "D",       # Allow missing docstrings in tests
    "PLR",     # Allow magic numbers and other pylint refactoring issues in tests
    "BLE001",  # Allow broad exception handling in tests
    "B017"     # Allow pytest.raises(Exception) in tests
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["src"]
combine-as-imports = true
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]
force-single-line = false
force-sort-within-sections = true
order-by-type = true
relative-imports-order = "closest-to-furthest"
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]